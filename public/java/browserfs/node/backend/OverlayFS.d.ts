import file_system = require('../core/file_system.d.ts');
import { ApiError } from '../core/api_error.d.ts';
import { FileFlag } from '../core/file_flag.d.ts';
import file = require('../core/file.d.ts');
import Stats from '../core/node_fs_stats.d.ts';
import preload_file = require('../generic/preload_file.d.ts');
export default class OverlayFS extends file_system.SynchronousFileSystem implements file_system.FileSystem {
    private _writable;
    private _readable;
    private _isInitialized;
    private _initializeCallbacks;
    private _deletedFiles;
    private _deleteLog;
    constructor(writable: file_system.FileSystem, readable: file_system.FileSystem);
    private checkInitialized();
    getOverlayedFileSystems(): {
        readable: file_system.FileSystem;
        writable: file_system.FileSystem;
    };
    private createParentDirectories(p);
    static isAvailable(): boolean;
    _syncSync(file: preload_file.PreloadFile<any>): void;
    getName(): string;
    initialize(cb: (err?: ApiError) => void): void;
    isReadOnly(): boolean;
    supportsSynch(): boolean;
    supportsLinks(): boolean;
    supportsProps(): boolean;
    private deletePath(p);
    private undeletePath(p);
    renameSync(oldPath: string, newPath: string): void;
    statSync(p: string, isLstat: boolean): Stats;
    openSync(p: string, flag: FileFlag, mode: number): file.File;
    unlinkSync(p: string): void;
    rmdirSync(p: string): void;
    mkdirSync(p: string, mode: number): void;
    readdirSync(p: string): string[];
    existsSync(p: string): boolean;
    chmodSync(p: string, isLchmod: boolean, mode: number): void;
    chownSync(p: string, isLchown: boolean, uid: number, gid: number): void;
    utimesSync(p: string, atime: Date, mtime: Date): void;
    private operateOnWritable(p, f);
    private copyToWritable(p);
}
